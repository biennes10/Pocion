<?php

namespace App\Controller;

use App\Entity\File;
use App\Entity\Project;
use App\Repository\FileRepository;
use App\Repository\ProjectRepository;
use App\Repository\ProjectUserRepository;
use App\Repository\UserRepository;
use App\Service\Helper;
use Doctrine\Common\Persistence\ObjectManager;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\IsGranted;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

class FileController extends AbstractController
{
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/file", options={"expose"=true}, name="file")
     */
    public function files(FileRepository $fileRepository, ProjectUserRepository $projectUserRepository, ProjectRepository $projectRepository, Helper $helper)
    {
        /*dump("test"); die();*/
        if ($this->isGranted('ROLE_ADMIN')) {
            $projectUsers = $projectRepository->findAll();
            foreach ($projectUsers as $projectUser) {
                $projectIds[] = $projectUser->getId();
            }
        } else {
            $projectUsers = $projectUserRepository->getUserProjects($this->getUser()->getId());
            $projectIds = $helper->projectIds($projectUsers, $projectRepository);
        }

        $files = $fileRepository->recent(30, $projectIds);

        return $this->render('user/HAF/file.html.twig', [
            'page' => 'file',
            'files' => $files,
        ]);
    }

    /**
     * @Route("/file/new", name="file_new")
     * @IsGranted("ROLE_USER")
     */
    public function fileNew(Request $request, ObjectManager $manager, FileRepository $fileRepository, ProjectUserRepository $projectUserRepository, ProjectRepository $projectRepository, Helper $helper, UserRepository $userRepository)
    {
        if ($this->isGranted('ROLE_ADMIN')) {
            $projectUsers = $projectRepository->findAll();
            $projectIds = [];
            foreach ($projectUsers as $projectUser) {
                $projectIds[] = $projectUser->getId();
            }
            $projects = $projectRepository->findAll();
        } else {
            $projectUsers = $projectUserRepository->getUserProjects($this->getUser()->getId());
            $projectIds = $helper->projectIds($projectUsers, $projectRepository);
            $projects = $projectRepository->getProjects($projectIds);
        }

        $files = $fileRepository->recent(30, $projectIds);

        $file = new File();
        $form = $this->createFormBuilder($file)
            ->add('subject', TextType::class, [
                'label' => 'Titre',
                'attr' => [
                    'placeholder' => 'Donnez un titre',
                    'autocomplete' => 'off'
                ]
            ])
            ->add('project', EntityType::class, [
                'label' => 'Projet',
                'class' => Project::class,
                'choice_label' => 'name',
                'choices' => $projects,
            ])
            ->add('url', FileType::class, [
                'label' => 'Document (image, pdf, ...)',
                'attr' => [
                    'placeholder' => 'Ajouter un fichier'
                ]
            ])
            ->getForm();

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $data = $form->getData();

            $fileToUpload = $form->get('url')->getData();

            $fileName = $this->generateUniqueFileName().'.'.$fileToUpload->getClientOriginalExtension();
            /*dump($fileName); die();*/
            try {
                $fileToUpload->move(
                    $this->getParameter('files_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }

            $file
                ->setUser($this->getUser())
                ->setProject($projectRepository->findOneById($data->getProject()))
                ->setCreatedAt(new \DateTime())
                ->setStatus(0)
                ->setValidation(0)
                ->setSubject($data->getSubject())
                ->setUrl($fileName)
            ;

            $manager->persist($file);
            $manager->flush();
            foreach($file->getProject()->getProjectUsers() as $project_users){

                $user = $project_users->getUser();
                $thisUser = $this->getUser();
                $path = "file_article,".$file->getId();

                $helper->notif($user,"Ajout au projet", "L'utilisateur ".$thisUser->getFirstName()." ".$thisUser->getLastName()." vient d'ajouter un fichier au projet : ".$file->getProject()->getName(),$path,"add_to_project,neutral","archive",null,$thisUser,$userRepository,$manager);


            }
            return $this->redirectToRoute('file');
        }

        return $this->render('user/HAF/file.html.twig', [
            'page' => 'file',
            'files' => $files,
            'form' => $form->createView(),
            'edit' => false
        ]);
    }

    /**
     * @Route("/file/{file}", options={"expose"=true}, name="file_article")
     */
    public function fileArticle(File $file, FileRepository $fileRepository, ProjectUserRepository $projectUserRepository, ProjectRepository $projectRepository, Helper $helper)
    {
        if ($this->isGranted('ROLE_ADMIN')) {
            $projectUsers = $projectRepository->findAll();
            foreach ($projectUsers as $projectUser) {
                $projectIds[] = $projectUser->getId();
            }
        } else {
            $projectUsers = $projectUserRepository->getUserProjects($this->getUser()->getId());
            $projectIds = $helper->projectIds($projectUsers, $projectRepository);
        }

        $files = $fileRepository->recent(30, $projectIds);

        return $this->render('user/HAF/file.html.twig', [
            'page' => 'file',
            'files' => $files,
            'article' => $file
        ]);
    }



    /**
     * @Route("/file/{file}/edit", name="file_article_edit")
     * @IsGranted("ROLE_USER")
     */
    public function fileArticleEdit(File $file, Request $request, ObjectManager $manager, FileRepository $fileRepository, ProjectRepository $projectRepository, ProjectUserRepository $projectUserRepository, Helper $helper)
    {
        if ($this->isGranted('ROLE_ADMIN'))
        {
            $projectUsers = $projectRepository->findAll();
            foreach ($projectUsers as $projectUser) {
                $projectIds[] = $projectUser->getId();
            }
            $projects = $projectRepository->findAll();

        } else {

            if ($file->getUser() !== $this->getUser()) {
                return $this->redirectToRoute('file_article', ['file' => $file->getId()]);
            }
            $projectUsers = $projectUserRepository->getUserProjects($this->getUser()->getId());
            $projectIds = $helper->projectIds($projectUsers, $projectRepository);
            $projects = $projectRepository->getProjects($projectIds);

        }

        $files = $fileRepository->recent(30, $projectIds);

        $form = $this->createFormBuilder($file)
            ->add('subject', TextType::class, [
                'label' => 'Titre',
                'attr' => [
                    'placeholder' => '...',
                    'autocomplete' => 'off'
                ],
                'data' => $file->getSubject()
            ])
            ->add('project', EntityType::class, [
                'label' => 'Projet',
                'class' => Project::class,
                'choice_label' => 'name',
                'choices' => $projects,
                'data' => $file->getProject()
            ])
            ->getForm();

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid())
        {

            $data = $form->getData();

            $file
                ->setProject($projectRepository->findOneById($data->getProject()))
                ->setStatus(0)
                ->setSubject($data->getSubject())
            ;

            $manager->flush();

            return $this->redirectToRoute('file_article', ['file' => $file->getId()]);

        }

        return $this->render('user/HAF/file.html.twig', [
            'page' => 'file',
            'files' => $files,
            'article' => $file,
            'form' => $form->createView(),
            'edit' => true
        ]);
    }

    /**
     * @Route("/file/{file}/delete", name="file_article_delete", options={"expose"=true})
     * @IsGranted("ROLE_USER")
     */
    public function handrailArticleDelete(File $file, ObjectManager $manager,UserRepository $userRepository, Helper $helper)
    {
        if($this->isGranted('ROLE_SUPER_ADMIN')){
            $manager->remove($file);
            $manager->flush();
        }else {
            $user = $this->getUser();
            if ($this->isGranted('ROLE_ADMIN')) {
                $canDelete = true;

            } else {
                if ($file->getUser() == $this->getUser()) {
                    $canDelete = true;
                } else {
                    $canDelete = false;

                }
            }

            if ($canDelete) {

                $file->setStatus(1);
                $users = $userRepository->findAll();
                foreach ($users as $user2) {
                    if ($user2->getRoles() == array("ROLE_SUPER_ADMIN")) {
                        $superAdmin = $user2;
                        break;
                    }
                }
                //$superAdmin = $userRepository->findOneByRoles(["ROLE_SUPER_ADMIN"]);

                $helper->notif($superAdmin, "Demande de suppression", "L'utilisateur " . $user->getFirstName() . " " . $user->getLastName() . " veut supprimer le fichier : " . $file->getSubject() . " du projet : " . $file->getProject()->getName(), null, "delete_from_project,warning", "calendar", "file," . $file->getId(), $user, $userRepository, $manager);

                $manager->flush();
                return $this->redirectToRoute('file_article', ['file' => $file->getId()]);
            } else {
                return $this->redirectToRoute('file');
            }
        }
        return $this->redirectToRoute('file');
    }
}
